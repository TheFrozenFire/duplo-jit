before:
  hooks:
    - go mod tidy
builds:
  - env:
      - CGO_ENABLED=0
    mod_timestamp: '{{ .CommitTimestamp }}'
    id: duplo-jit
    main: ./cmd/duplo-jit
    flags:
      - -trimpath
    ldflags:
      - '-s -w -X main.version={{.Version}} -X main.commit={{.Commit}}'
    goos:
      - freebsd
      - windows
      - linux
      - darwin
    goarch:
      - amd64
      - '386'
      - arm
      - arm64
    ignore:
      - goos: darwin
        goarch: '386'
    binary: 'duplo-jit'
  - env:
      - CGO_ENABLED=0
    mod_timestamp: '{{ .CommitTimestamp }}'
    id: duplo-aws-credential-process
    main: ./cmd/duplo-aws-credential-process
    flags:
      - -trimpath
    ldflags:
      - '-s -w -X main.version={{.Version}} -X main.commit={{.Commit}}'
    goos:
      - freebsd
      - windows
      - linux
      - darwin
    goarch:
      - amd64
      - '386'
      - arm
      - arm64
    ignore:
      - goos: darwin
        goarch: '386'
    binary: 'duplo-aws-credential-process'
archives:
  - format: zip
    name_template: '{{ .ProjectName }}_{{ .Version }}_{{ .Os }}_{{ .Arch }}'
checksum:
  name_template: '{{ .ProjectName }}_{{ .Version }}_SHA256SUMS'
  algorithm: sha256
changelog:
  skip: false
  filters:
    exclude:
      - '^\[release\] '
      - '^\[cicd\] '
      - '^Merge tag '
      - '^Merge branch '
      - '^bump '
announce:
  slack:
    enabled: true
    channel: '#duplo-devs'
release:
  draft: false
# .goreleaser.yaml
brews:
  - name: duplo-jit

    # IDs of the archives to use.
    # Empty means all IDs.
    # ids:
    # - foo
    # - bar

    # GOARM to specify which 32-bit arm version to use if there are multiple
    # versions from the build section. Brew formulas support only one 32-bit
    # version.
    #
    # Default: 6
    goarm: 6

    # GOAMD64 to specify which amd64 version to use if there are multiple
    # versions from the build section.
    #
    # Default: v1
    goamd64: v1

    # NOTE: make sure the url_template, the token and given repo (github or
    # gitlab) owner and name are from the same kind.
    # We will probably unify this in the next major version like it is
    # done with scoop.

    # GitHub/GitLab repository to push the formula to
    tap:
      # Repository owner.
      #
      # Templates: allowed
      owner: duplocloud

      # Repository name.
      #
      # Templates: allowed
      name: homebrew-tap

      # Optionally a branch can be provided.
      #
      # Default: default repository branch.
      #
      # Templates: allowed
      branch: main

      # Optionally a token can be provided, if it differs from the token
      # provided to GoReleaser
      token: ${{ secrets.RELEASE_BOT_GITHUB_TOKEN }}

    # URL which is determined by the given Token (github, gitlab or gitea).
    #
    # Default depends on the client.
    # Templates: allowed
    url_template: "https://github.com/duplocloud/duplo-jit/releases/download/{{ .Tag }}/{{ .ArtifactName }}"

    # Git author used to commit to the repository.
    commit_author:
      name: duplo-bot
      email: joe+github-bot@duplocloud.net

    # The project name and current git tag are used in the format string.
    #
    # Templates: allowed
    commit_msg_template: "Brew formula update for {{ .ProjectName }} version {{ .Tag }}"

    # Folder inside the repository to put the formula.
    folder: Formula

    # Your app's homepage.
    homepage: "https://github.com/duplocloud/duplo-jit"

    # Your app's description.
    #
    # Templates: allowed
    description: "Command-line tools for JIT Duplo, AWS and Kubernetes access"

    # SPDX identifier of your app's license.
    license: "MIT"

    # So you can `brew test` your formula.
    test: |
      system "duplo-jit version"
